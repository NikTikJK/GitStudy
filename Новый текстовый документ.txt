Индивидуальный разработчик (автономный)[[Индивидуальный разработчик (автономный)]]
Автономный индивидуальный разработчик не обменивается патчами с другими людьми и работает один в одном репозитории, используя следующие команды.

git-init[1] для создания нового репозитория.

git-show-branch[1] , чтобы увидеть, где вы находитесь.

git-log[1] , чтобы увидеть, что произошло.

git-checkout[1] и git-branch[1] для переключения веток.

git-add[1] для управления индексным файлом.

git-diff[1] и git-status[1] , чтобы увидеть, чем вы сейчас занимаетесь.

git-commit[1] для продвижения текущей ветки.

git-reset[1] и git-checkout[1] (с параметрами имени пути) для отмены изменений.

git-merge[1] для слияния между локальными ветвями.

git-rebase[1] для поддержки тематических веток.

git-tag[1] для отметки известной точки.

Примеры
Используйте архив в качестве отправной точки для нового репозитория.
$ tar zxf frotz.tar.gz 
$ cd frotz 
$ git init 
$ git add . (1) 
$ git commit -m "импорт исходного дерева fritz." 
Тег $ git v2.43 (2)
добавить все в текущий каталог.

сделать легкий, неаннотированный тег.

Создавайте ветку темы и развивайтесь.
$ git checkout -b alsa-audio (1) 
$ edit/compile/test 
$ git checkout -- curses/ux_audio_oss.c (2) 
$ git add curses/ux_audio_alsa.c (3) 
$ edit/compile/test 
$ git diff HEAD (4) 
$ git commit -a -s (5) 
$ edit/compile/test 
$ git reset --soft HEAD^ (6) 
$ edit/compile/test 
$ git diff ORIG_HEAD (7) 
$ git commit -a - c ORIG_HEAD (8) 
$ git checkout master (9) 
$ git merge alsa-audio (10) 
$ git log --since='3 days ago' (11) 
$ git log v2.43.. curses/ (12)
создать новую ветку темы.

отменить ваши неудачные изменения в curses/ux_audio_oss.c.

вам нужно сообщить Git, если вы добавили новый файл; удаление и модификация будут пойманы, если вы сделаете это git commit -aпозже.

чтобы увидеть, какие изменения вы совершаете.

зафиксируйте все, как вы протестировали, с вашей подписью.

вернуть последний коммит, сохранив то, что находится в рабочем дереве.

посмотрите на изменения после преждевременной фиксации, которую мы отменили.

повторить фиксацию, отмененную на предыдущем шаге, используя первоначально написанное сообщение.

переключиться на основную ветку.

объединить ветку темы с основной веткой.

просматривать журналы коммитов; другие формы для ограничения вывода можно комбинировать и включать --max-count=10(показать 10 коммитов), --until=2005-12-10и т. д.

просматривать только те изменения, которые касаются того, что находится в curses/ каталоге, начиная с v2.43tag.

Индивидуальный разработчик (участник)[[Индивидуальный разработчик (участник)]]
Разработчик, работающий в качестве участника группового проекта, должен научиться общаться с другими и использовать эти команды в дополнение к тем, которые необходимы автономному разработчику.

git-clone[1] из апстрима, чтобы подготовить ваш локальный репозиторий.

git-pull[1] и git-fetch[1] из «origin», чтобы быть в курсе последних событий.

git-push[1] в общий репозиторий, если вы используете рабочий процесс общего репозитория в стиле CVS.

git-format-patch[1] для подготовки отправки по электронной почте, если вы принимаете рабочий процесс публичного форума в стиле ядра Linux.

Примеры
Клонируйте апстрим и работайте над ним. Поток меняется на восходящий.
$ git clone git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6 
$ cd my2.6 
$ edit/compile/test; git commit -a -s (1) 
$ git format-patch origin (2) 
$ git pull (3) 
$ git log -p ORIG_HEAD.. arch/i386 include/asm-i386 (4) 
$ git pull git:// git.kernel.org/pub/.../jgarzik/libata-dev.git ВСЕ (5) 
$ git reset --hard ORIG_HEAD (6) 
$ git gc (7) 
$ git fetch --tags (8)
повторять по мере необходимости.

извлекать патчи из вашей ветки для отправки по электронной почте.

git pullизвлекается originпо умолчанию и объединяется с текущей веткой.

сразу после извлечения посмотрите на изменения, сделанные выше по течению с момента последней проверки, только в интересующей нас области.

выборка из определенной ветки из определенного репозитория и слияние.

вернуть тягу.

мусор собирает оставшиеся объекты из возвращенного извлечения.

время от времени получайте официальные теги от origin и храните их в .git/refs/tags/.

Нажмите в другой репозиторий.
Satellite$ git clone mothership:frotz frotz (1) 
Satellite$ cd frotz 
Satellite$ git config --get-regexp '^(remote|branch)\.' (2) 
remote.origin.url mothership:frotz 
remote.origin.fetch refs/heads/*:refs/remotes/origin/* 
branch.master.remote origin 
branch.master.merge refs/heads/master 
Satellite$ git config remote .origin.push \ 
           master:refs/remotes/satellite/master (3) 
Satellite$ edit/compile/test/commit 
Satellite$ git push origin (4)
 
mothership$ cd frotz 
mothership$ git checkout master 
mothership$ git merge Satellite/master (5)
Материнская машина имеет репозиторий fritz в вашем домашнем каталоге; клонируйте его, чтобы запустить репозиторий на машине-спутнике.

clone устанавливает эти переменные конфигурации по умолчанию. Он организует git pullизвлечение и сохранение ветвей материнской машины в локальные remotes/origin/*ветки удаленного отслеживания.

договориться git pushо том, чтобы подтолкнуть локальную masterветку к remotes/satellite/masterветке материнской машины.

push спрячет нашу работу в remotes/satellite/master ветке удаленного отслеживания на материнской машине. Вы можете использовать это как резервный метод.

на материнской машине объедините работу, выполненную на вспомогательной машине, с главной веткой.

Ответвление от определенного тега.
$ git checkout -b private2.6.14 v2.6.14 (1) 
$ редактировать/компилировать/тестировать; git commit -a 
$ git checkout master 
$ git format-patch -k -m --stdout v2.6.14..private2.6.14 | 
  git am -3 -k (2)
создайте частную ветку на основе хорошо известного (но несколько отстающего) тега.

пересылать все изменения в private2.6.14ветке в masterветку без формального "слияния".

Интегратор
Центральное лицо, выступающее в качестве интегратора в групповом проекте, получает изменения, сделанные другими, просматривает и интегрирует их и публикует результат для использования другими, используя эти команды в дополнение к тем, которые нужны участникам.

git-am[1] для применения исправлений, отправленных по электронной почте вашими участниками.

git-pull[1] для слияния с вашими доверенными помощниками.

git-format-patch[1] для подготовки и отправки предложенной альтернативы участникам.

git-revert[1] для отмены неудачных коммитов.

git-push[1] , чтобы опубликовать передний край.

Примеры
Мой типичный день Git.
$ git status (1) 
$ git show-branch (2) 
$ mailx (3) 
& s 2 3 4 5 ./+to-apply 
& s 7 8 ./+hold-linus 
& q 
$ git checkout -b тема/ один мастер 
$ git am -3 -i -s -u ./+to-apply (4) 
$ compile/test 
$ git checkout -b hold/linus && git am -3 -i -s -u ./+hold- linus (5) 
$ git checkout тема/один && git rebase master (6) 
$ git checkout pu && git reset --hard next (7) 
$ git merge тема/одна тема/два && git merge hold/linus (8) 
$ git checkout maint 
$ git cherry-pick master~4 (9) 
$ compile/test 
$ git tag -s -m "GIT 0.99.9x" v0.99.9x(10) 
$ git fetch ko && git show-branch master maint 'tags/ko-*' (11) 
$ git push ko (12) 
$ git push ko v0.99.9x (13)
посмотреть, что я был в середине делать, если таковые имеются.

посмотрите, какие у меня тематические ветки и подумайте, насколько они готовы.

читайте письма, сохраняйте те, которые применимы, и сохраняйте другие, которые не совсем готовы.

применять их в интерактивном режиме с моими подписями.

создайте ветку темы по мере необходимости и подайте заявку, опять же с моими подписями.

перебазировать внутреннюю ветку темы, которая не была объединена с мастером или представлена ​​как часть стабильной ветки.

перезапускать puкаждый раз со следующего.

и связка тематических веток все еще готовится.

резервное копирование критического исправления.

создать подписанный тег.

убедитесь, что я случайно не перемотал мастер дальше того, что уже вытолкнул. koсокращенно указывает на репозиторий, который у меня есть на kernel.org, и выглядит так:

$ cat .git/remotes/ko 
URL: kernel.org:/pub/scm/git/git.git 
Pull: master:refs/tags/ko-master 
Pull: next:refs/tags/ko-next 
Pull: maint: refs/tags/ko-maint 
Push: master 
Push: next 
Push: +pu 
Push: maint
В выводе git show-branchдолжно masterбыть все ko-master, и nextдолжно быть все ko-next.

вытолкнуть кровоточащий край.

бирку тоже вытолкнуть.

Администрация репозитория[[Администрация репозитория]]
Администратор репозитория использует следующие инструменты для настройки и поддержания доступа разработчиков к репозиторию.

git-daemon[1] , чтобы разрешить анонимную загрузку из репозитория.

git-shell[1] можно использовать как оболочку с ограниченным входом в систему для пользователей общего центрального репозитория.

update hook howto содержит хороший пример управления общим центральным репозиторием.

Примеры
Мы предполагаем следующее в /etc/services
$ grep 9418 /etc/services 
git 9418/tcp # Система контроля версий Git
Запустите git-daemon для обслуживания /pub/scm из inetd.
$ grep git /etc/inetd.conf 
git stream tcp nowait Nobody \ 
  /usr/bin/git-daemon git-daemon --inetd --export-all /pub/scm
Фактическая строка конфигурации должна быть на одной строке.

Запустите git-daemon для обслуживания /pub/scm из xinetd.
$ cat /etc/xinetd.d/git-daemon 
# по умолчанию: выключено 
# описание: сервер Git предлагает доступ к 
службе репозиториев Git git 
{ 
        disable = no 
        type = UNLISTED 
        port = 9418 
        socket_type = stream 
        wait = no 
        user = none 
        server = /usr/bin/git-daemon 
        server_args = --inetd --export-all --base-path=/pub/scm 
        log_on_failure += USERID 
}
Проверьте документацию и настройки xinetd(8), это из системы Fedora. Другие могут быть другими.

Предоставьте разработчикам доступ только к push/pull.
$ grep git /etc/passwd (1) 
alice:x:1000:1000::/home/alice:/usr/bin/git-shell 
bob:x:1001:1001::/home/bob:/usr/bin /git-shell 
Синди:x:1002:1002::/дом/синди:/usr/bin/git-оболочки 
Дэвид:x:1003:1003::/домашний/Дэвид:/usr/bin/git-shell 
$ grep git /etc/shells (2) 
/usr/bin/git-shell
для входа в оболочку установлено значение /usr/bin/git-shell, что не позволяет ничего, кроме git pushи git pull. Пользователи должны получить ssh-доступ к машине.

во многих дистрибутивах /etc/shells необходимо указать, что используется в качестве оболочки входа в систему.

Общий репозиторий в стиле CVS.
$ grep git /etc/group (1) 
git:x:9418:alice,bob,cindy,david 
$ cd /home/devo.git 
$ ls -l (2) 
  lrwxrwxrwx 1 david git 17 4 декабря 22:40 HEAD - > refs/heads/master 
  drwxrwsr-x 2 david git 4096 4 декабря 22:40 ветки 
  -rw-rw-r-- 1 david git 84 4 декабря 22:40 config 
  -rw-rw-r-- 1 david git 58 декабря 4 22:40 description 
  drwxrwsr-x 2 david git 4096 4 декабря 22:40 hooks 
  -rw-rw-r-- 1 david git 37504 4 декабря 22:40 index 
  drwxrwsr-x 2 david git 4096 4 декабря 22:40 info 
  drwxrwsr -x 4 david git 4096 4 декабря 22:40 объекты 
  drwxrwsr-x 4 david git 4096 7 ноября 14:58 refs 
  drwxrwsr-x 2 david git 4096 4 декабря 22:40 remotes
$ ls -l hooks/update (3) 
  -r-xr-xr-x 1 david git 3536 4 декабря 22:40 update 
$ cat info/allowed-users (4) 
refs/heads/master alice\|cindy 
refs/heads /doc-update bob 
refs/tags/v[0-9]* Дэвид
поместите разработчиков в одну группу git.

и сделайте общий репозиторий доступным для записи для группы.

используйте пример update-hook Карла из Documentation/howto/ для управления политикой ветки.

alice и cindy могут вставлять в master, только bob может вставлять в doc-update. Дэвид — менеджер релиза и единственный человек, который может создавать и продвигать теги версий.

HTTP-сервер для поддержки тупой передачи протокола.
dev$ git update-server-info (1) 
dev$ ftp user@isp.example.com (2) 
ftp> cp -r .git /home/user/myproject.git
убедитесь, что ваша информация/ссылки и объекты/информация/пакеты обновлены

загрузить на общедоступный HTTP-сервер, размещенный вашим провайдером.